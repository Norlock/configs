" Use ZZ (quit and save) us ZQ (quit no save)
call plug#begin('~/.local/share/nvim/plugged')

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'ap/vim-css-color'
Plug 'justinmk/vim-dirvish'
Plug 'justinmk/vim-sneak'
Plug 'godlygeek/tabular' " Surrounds around tabs 
Plug 'ludovicchabant/vim-gutentags'

" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'

" Autocomplete coc
Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}

" Themes
Plug 'itchyny/lightline.vim'
Plug 'ayu-theme/ayu-vim' 

" Markdown
Plug 'kannokanno/previm'

" Javascript
Plug 'pangloss/vim-javascript'

" Initialize plugin system
call plug#end()

"---- Theme ----
set termguicolors
set background=dark
let ayucolor="dark" 
colorscheme ayu

let g:lightline = {
        \ 'colorscheme': 'ayu',
        \ }

" Highlight current line
hi! Normal ctermbg=NONE guibg=NONE
hi! NonText ctermbg=NONE guibg=NONE
highlight LineNr ctermbg=NONE guibg=NONE

filetype plugin indent on
set autoindent smartindent    " turns it on
set number relativenumber " Number on the line relative number above below.
set tabstop=4 softtabstop=4 expandtab shiftwidth=4 
set noshowmode		" Hide extra line to show the curent mode
set cursorline    " Highlight current line
set scrolloff=3 " Always leave lines down
set tw=120 " Set textwidth 
set pastetoggle=<F2>
set fileencoding=utf-8
set encoding=utf-8

" Buffers
nmap Zc <Esc>:bw<Cr>

" Clipboard
nmap <Leader>p "+
vmap <Leader>p "+

"---- Search ----
set smartcase

" Clean search highlighting
nnoremap <silent> <Esc> :nohlsearch<Cr>

" Remap escape
inoremap jj <Esc> 

imap <C-s> <Esc>:w<Cr>a
nmap <C-s> :w<Cr>

" press F4 to fix indentation in whole file; overwrites marker 'q' position
noremap <F4> mqggVG=`qzz
inoremap <F4> <Esc>mqggVG=`qzza

" Navigation
nmap <Tab> :tabnext<Cr>
nmap <S-Tab> :tabprevious<Cr>
nmap <Leader>f :FZF<Cr>
nmap <Leader>g :GitFiles<Cr>
nmap <Leader>l :Locate 
nmap <Leader>a :Rg<Cr>
nmap <silent> <Leader>b :Buffers<Cr>
nnoremap <Leader>w :w !sudo tee %<Cr>

nmap [[ :bn<Cr> 
nmap ]] :bp<Cr> 

let g:gutentags_file_list_command = 'rg --files'

" Switch between panes with alt
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

set splitright " Splits pane to the right
set splitbelow " Splits pane below

set hidden " Allow switching buffers even if not written

let g:fzf_action = {
			\ 'ctrl-t': 'tab split',
			\ 'ctrl-h': 'split',
			\ 'ctrl-v': 'vsplit' }

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" Easymotion like tags
let g:sneak#label = 1

" coc config
let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-pairs',
  \ 'coc-html',
  \ 'coc-tsserver',
  \ 'coc-eslint', 
  \ 'coc-prettier', 
  \ 'coc-json', 
  \ 'coc-css', 
  \ ]

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
"
" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Remap keys for applying codeAction to the current line.
nmap <c-space> <Plug>(coc-codeaction)

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Markdown
let g:previm_open_cmd = 'firefox'

" Easy nvim config
nmap <Leader>n :tabedit ~/.config/nvim/init.vim<Cr>
